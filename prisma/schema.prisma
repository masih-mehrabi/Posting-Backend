// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id       String        @id @default(uuid())
  title    String
  body     String
  userId   Int
  user     User       @relation(fields: [userId], references: [id])
  comments Comment[]
  likes    PostLike[]
}

model User {
  id           Int           @id @default(autoincrement())
  firstName     String
  lastName  String 
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  hash         String
  prfilePicUrl  String ?
  posts         Post[]
  comments     Comment[]
  postLikes    PostLike[]
  commentLikes  CommentLike[]
  // creator Conversation? @relation("creator")
  // recepient Conversation? @relation("recepient")
  // messages Message[]
}

model Comment {
  id        String           @id @default(uuid())
  message   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  children  Comment[]     @relation("ParentChild")
  likes     CommentLike[]
}

model PostLike {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId String
  @@id([userId, postId])
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    Int
  commentId String
  @@id([userId, commentId])
}

// model Session {
//   id String @id @default(uuid())
//   expiredAt DateTime @default(now())
//   json String
//   destroyedAt DateTime 
// }

// model Conversation {
//   creator User @relation("creator",fields: [creatorId], references: [id])
//   creatorId Int @unique
//   recepient User @relation("recepient",fields: [recepientId], references: [id])
//   recepientId Int  @unique
//   messages Message[] 

//   createdAt DateTime @default(now())
//    @@id([creatorId, recepientId])   
   
// }

// model Message  {
//   conversation Conversation @relation(fields: [senderId, receiverId], references: [creatorId,recepientId], onDelete: Cascade, onUpdate: Cascade)
//   senderId Int 
//   receiverId Int
//   @@id([senderId, receiverId])
//   content String
//   createdAt DateTime @default(now())
//   author User @relation(fields: [userId], references: [id])
//   userId Int
// }

